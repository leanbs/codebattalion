{"changed":true,"filter":false,"title":"problems_controller.rb","tooltip":"/app/controllers/problems_controller.rb","value":"class ProblemsController < ApplicationController\n    def index\n        @algorithms = Problem.where(ID_BUNDLE_FKEY: 1)\n        @machine_learning = Problem.where(ID_BUNDLE_FKEY: 2)\n        @miscellaneous = Problem.where(ID_BUNDLE_FKEY: 3)\n        @mathematics = Problem.where(ID_BUNDLE_FKEY: 4)\n    end\n    def single\n        @problem_info = Problem.find_by(ID_PROBLEM_KEY: params[:id])\n        @psetter = ProblemSetter.find_by(ID_PROBLEM_SETTER_KEY: @problem_info.ID_PROBLEM_SETTER_FKEY)\n        @bundlename = Bundle.find_by(ID_BUNDLE_KEY: @problem_info.ID_BUNDLE_FKEY)\n    end\n    \n    def create\n        redirect_to error_404_path if current_user_type != \"pset\" or !logged_in?\n        @bundle_select = []\n        Bundle.all.each{|b| @bundle_select << [b.BundleName, b.id]}\n        print @bundle_select\n        @problems_input = Problem.new\n    end\n    \n    def edit\n        redirect_to error_404_path if current_user_type != \"pset\" or !logged_in?\n        @bundle_select = []\n        Bundle.all.each{|b| @bundle_select << [b.BundleName, b.id]}\n        print @bundle_select\n        @problem = Problem.find_by(ID_PROBLEM_KEY: params[:id])\n    end\n    \n    def editprob\n        @problemedit = Problem.find_by(ID_PROBLEM_KEY:params[:problem_edit][:probid])\n        @problemedit.ProblemName = params[:problem_edit][:problemname]\n        @problemedit.ProblemDescription = params[:problem_edit][:content]\n        if @problemedit.valid?\n            @problemedit.save\n            redirect_to list_of_created_path\n        else\n            render 'edit'\n        end\n    end\n    \n    def list\n        if current_user_type != \"pset\"\n            redirect_to error_404_path\n        else\n            puts current_user_type\n            @problems_created = Problem.where(ID_PROBLEM_SETTER_FKEY: current_user.id)\n        end\n    end\n    \n    def new\n        @problemsave = Problem.new(ProblemName: params[:problem_input][:problemname], ProblemDescription: params[:problem_input][:content], TotalHackerSolved:0, ID_PROBLEM_SETTER_FKEY: current_user.id, ID_BUNDLE_FKEY: params[:bundle_option], Points: params[:point_option])\n        if @problemsave.valid?\n            @problemsave.save\n            @input = params[:problem_input][:input]\n            @output = params[:problem_input][:output]\n            in_url, out_url = dropbox_connect(@input, @output, @problemsave.id)\n            @testcase = TestCase.create(ID_PROBLEM_FKEY: @problemsave.id, TestCaseInputURL: in_url, TestCaseOutputURL: out_url)\n            @testcase.save\n            @psetter = ProblemSetter.find_by(ID_PROBLEM_SETTER_KEY: current_user.id)\n            @psetter.totalproblemsuploaded += 1\n            @psetter.save\n        else\n            render 'create'\n        end\n    end\n    \n    def submit_result\n        @verdict = \"\"\n        @language = params[:language]\n        @problem_id = params[:submit_answer][:problem_id]\n        @submissionsave = Submission.create(ID_PROBLEM_FKEY: @problem_id, ID_HACKER_FKEY: current_user.id, Language: @language)\n        @submission_outputname = \"answers/submission#{@submissionsave.id}.txt\"\n        @submissionsave.SubmissionOutputURL = @submission_outputname\n        @code = params[:submit_answer][:code].split(\"\\n\")\n        @code.each {|x| x.chomp!}\n  \t    @status = check_solution(@code, @language, @submission_outputname, @problem_id)\n  \t    print @status\n  \t    if @status == nil\n  \t        @submissionsave.Verdict = \"TLE\"\n  \t    elsif @status[0] == ''\n  \t        @submissionsave.Verdict = \"ERR\"\n  \t        @error_codes = @status[1]\n  \t    else\n  \t        @res = @status[0].split(\"\\n\")\n  \t        @res.each {|x| x.chomp!}\n  \t        @verdict = match_solution(@res, @problem_id)\n  \t        @submissionsave.Verdict = \"WA\"\n  \t        if @verdict == true\n  \t            @temppoint = Problem.find_by(ID_PROBLEM_KEY: @problem_id)\n  \t            @tempsub = Submission.find_by(Verdict: \"ACC\", ID_HACKER_FKEY: current_user.id, ID_PROBLEM_FKEY: @problem_id)\n  \t            if @tempsub == nil\n  \t                current_user.rating += @temppoint.Points\n  \t                current_user.save\n  \t            end\n  \t            @submissionsave.Verdict = \"ACC\"\n  \t        end\n  \t    end\n  \t    @submissionsave.save\n    end\n    \n    def search\n        @keyword = \"%#{params[:search_query][:keyword]}%\"\n        @search_result = Problem.where(\"ProblemName like ?\", @keyword)\n    end\nend\n","undoManager":{"mark":-2,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":1048,"scrollleft":0,"selection":{"start":{"row":73,"column":68},"end":{"row":73,"column":68},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1425394009000}